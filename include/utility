/*	Copyright (C) 2004 Garrett A. Kajmowicz
	This file is part of the uClibc++ Library.

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*/


#include <memory>


#ifndef __STD_HEADER_UTILITY
#define __STD_HEADER_UTILITY 1


namespace std{

	namespace rel_ops {
		template<class T> bool operator!=(const T&, const T&);
		template<class T> bool operator> (const T&, const T&);
		template<class T> bool operator<=(const T&, const T&);
		template<class T> bool operator>=(const T&, const T&);
	};



	template <class T1, class T2> struct pair;
	template <class T1, class T2> bool operator==(const pair<T1,T2>&, const pair<T1,T2>&);
	template <class T1, class T2> bool operator< (const pair<T1,T2>&, const pair<T1,T2>&);
	template <class T1, class T2> bool operator!=(const pair<T1,T2>&, const pair<T1,T2>&);
	template <class T1, class T2> bool operator> (const pair<T1,T2>&, const pair<T1,T2>&);
	template <class T1, class T2> bool operator>=(const pair<T1,T2>&, const pair<T1,T2>&);
	template <class T1, class T2> bool operator<=(const pair<T1,T2>&, const pair<T1,T2>&);
	template <class T1, class T2> pair<T1,T2> make_pair(const T1&, const T2&);


	template <class T1, class T2> struct pair {
		typedef T1 first_type;
		typedef T2 second_type;

		T1 first;
		T2 second;
		pair();
		pair(const T1& x, const T2& y);
		template<class U, class V> pair(const pair<U, V> &p);
	};

	
	template <class T1, class T2> pair<T1, T2>::pair() : first(), second() {  }

	template <class T1, class T2> pair<T1, T2>::pair(const T1& x, const T2& y)
		: first(x), second(y) {  }

	template <class T1, class T2> template<class U, class V> pair<T1, T2>::pair(const pair<U, V> &p)
		:first(p.first), second(p.second) {  }


	






}



#endif

#include <basic_definitions>
#include <exception>
#include <string>

#ifndef HEADER_STD_EXCEPTIONS
#define HEADER_STD_EXCEPTIONS 1

namespace std{

//typedef basic_string<char> string;

class logic_error : public exception {
protected:
	string mstring;
public:
	logic_error() throw();
	logic_error(const string& what_arg);

	virtual ~logic_error() throw();
	virtual const char * what();

};	

class domain_error : public logic_error {
public:
	domain_error() : logic_error() {}
	domain_error(const string& what_arg) : logic_error(what_arg) {}
	virtual ~domain_error() throw() {}
};

class invalid_argument : public logic_error {
public:
	invalid_argument() : logic_error(){}
	invalid_argument(const string& what_arg) : logic_error(what_arg){}
	virtual ~invalid_argument() throw() {}
};

class length_error : public logic_error {
public:
	length_error() : logic_error(){}
	length_error(const string& what_arg) : logic_error(what_arg){}
	virtual ~length_error() throw() {}
};

class out_of_range : public logic_error{
public:
	out_of_range() : logic_error() {}
	out_of_range(const string & what_arg) : logic_error(what_arg) {}
	virtual ~out_of_range() throw() {}
};

class runtime_error{
protected:
	string mstring;
public:
//	runtime_error() : mstring() {}
	runtime_error();
	runtime_error(const string& what_arg) : mstring(what_arg){}

	virtual ~runtime_error(){ }
	virtual const char * what(){ return mstring.c_str(); }
};

class range_error : public runtime_error{
public:
	range_error() : runtime_error(){}
	range_error(const string& what_arg) : runtime_error(what_arg) {}
	virtual ~range_error(){ }
};


class overflow_error : public runtime_error{
public:
	overflow_error() : runtime_error(){}
	overflow_error(const string& what_arg) : runtime_error(what_arg) {}
	virtual ~overflow_error(){}
};

class underflow_error : public runtime_error{
public:
	underflow_error() : runtime_error(){}
	underflow_error(const string& what_arg) : runtime_error(what_arg) {}
	virtual ~underflow_error(){}
};



};

#endif

/*	Copyright (C) 2004 Garrett A. Kajmowicz

	This file is part of the uClibc++ Library.

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*/

#include <memory>

#ifndef __HEADER_VECTOR_HELPERS
#define __HEADER_VECTOR_HELPERS 1

namespace std{

	/* Pull out some of the vector functions here so that the main functions
	 * can be instantiated to save space
	 */
	template <class T, class Allocator> class vector;


	template<class T, class Allocator = allocator<T> > class __vector_helper_functions{
	public:
		inline static void reserve(vector<T, Allocator> & v, typename Allocator::size_type n){
			if(n > v.data_size){              //We never shrink...
				T * temp_ptr = v.data;
				typename Allocator::size_type temp_size = v.data_size;

				v.data_size = n;
				v.data = v.a.allocate(v.data_size);

				for(typename Allocator::size_type i = 0; i<v.elements; ++i){
					v.data[i] = temp_ptr[i];
				}
				v.a.deallocate(temp_ptr, temp_size);
			}
		}

		inline static void resize(vector<T, Allocator> & v, typename Allocator::size_type sz, T c){
			if(sz > v.elements){      //Need to actually call constructor
				typename Allocator::size_type temp_el = v.elements;
				v.reserve(sz + __UCLIBCXX_STL_BUFFER_SIZE__);

				v.elements = sz;

				for(typename Allocator::size_type i = temp_el; i<v.elements;i++){
					v.data[i] = c;
				}
			}else{
				v.reserve(sz + __UCLIBCXX_STL_BUFFER_SIZE__);
				v.elements = sz;
			}
		}
	};

}


#endif


/*	Copyright (C) 2004 Garrett A. Kajmowicz
	This file is part of the uClibc++ Library.

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/



#include<memory>
#include<utility>
#include<iterator>
#include<deque>
#include<functional>


#ifndef __STD_HEADER_SET
#define __STD_HEADER_SET


namespace std{
	

template<class Key, class Compare = less<Key>, class Allocator = allocator<Key> >
	class set {
		//Default value of allocator does not meet C++ standard specs, but it works for this library
		//Deal with it
protected:
	class set_iter;
	class set_citer;
	friend class set_iter;
	friend class set_citer;

public:

	typedef Key					key_type;
	typedef Key					value_type;
	typedef Compare					key_compare;
	typedef Allocator				allocator_type;
	typedef typename Allocator::reference		reference;
	typedef typename Allocator::const_reference	const_reference;
	typedef set_iter				iterator;
	typedef set_citer				const_iterator;
	typedef typename Allocator::size_type		size_type;
	typedef typename Allocator::difference_type	difference_type;
	typedef typename Allocator::pointer			pointer;
	typedef typename Allocator::const_pointer		const_pointer;
	typedef typename std::reverse_iterator<iterator>		reverse_iterator;
	typedef typename std::reverse_iterator<const_iterator>	const_reverse_iterator;

	class value_compare;

	explicit set(const Compare& comp = Compare(), const Allocator& al = Allocator());
	template <class InputIterator> set(InputIterator first, InputIterator last,
		const Compare& comp = Compare(), const Allocator& = Allocator());

	set(const set<Key,Compare,Allocator>& x);
	~set();
	set<Key, Compare,Allocator>& operator=(const set<Key,Compare,Allocator>& x);

	iterator               begin();
	const_iterator         begin() const;
	iterator               end();
	const_iterator         end() const;
	reverse_iterator       rbegin();
	const_reverse_iterator rbegin() const;
	reverse_iterator       rend();
	const_reverse_iterator rend() const;

	bool      empty() const;
	size_type size() const;
	size_type max_size() const;

	pair<iterator, bool> insert(const value_type& x);
	iterator             insert(iterator position, const value_type& x);

	template <class InputIterator> void insert(InputIterator first, InputIterator last);
	void      erase(iterator position);
	size_type erase(const key_type& x);
	void      erase(iterator first, iterator last);
	void swap(set<Key,Compare,Allocator>&);
	void clear();

	key_compare   key_comp() const;
//	value_compare value_comp() const;

	iterator       find(const key_type& x);
	const_iterator find(const key_type& x) const;
	size_type      count(const key_type& x) const;
	iterator       lower_bound(const key_type& x);
	const_iterator lower_bound(const key_type& x) const;
	iterator       upper_bound(const key_type& x);
	const_iterator upper_bound(const key_type& x) const;
	pair<iterator,iterator>             equal_range(const key_type& x);
	pair<const_iterator,const_iterator> equal_range(const key_type& x) const;

protected:
	deque<Key, allocator<Key> > data;
	Compare c;
};


	//Implementations

	template<class Key, class Compare, class Allocator> class
		set<Key, Compare, Allocator>::set_iter
			: public std::iterator<
				bidirectional_iterator_tag,
				Key,
				typename Allocator::difference_type,
				typename Allocator::pointer,
				typename Allocator::reference
			>
	{
	protected:
		friend class set<Key, Compare, Allocator>;
		friend class set<Key, Compare, Allocator>::const_iterator;
		set<Key, Compare, Allocator>::size_type element;
		set<Key, Compare, Allocator> * container;
	public:
		set_iter() : element(0), container(0) {  }
		set_iter(const set<Key, Compare, Allocator>::iterator & m) 
			: element(m.element), container(m.container) {  }
		set_iter(set<Key, Compare, Allocator>::size_type e, set<Key, Compare, Allocator> * c) 
			: element(e), container(c) {  }
		~set_iter() {  }
		
		typename set<Key, Compare, Allocator>::value_type operator*(){
			return container->data[element];
		}
		typename set<Key, Compare, Allocator>::value_type * operator->(){
			return &(container->data[element]);
		}
		set_iter & operator=(set<Key, Compare, Allocator> & m){
			element = m.element;
			container = m.container;
			return *this;
		}
		bool operator==(const typename set<Key, Compare, Allocator>::iterator & m){
			return (m.element == element && m.container == container);
		}
		bool operator!=(const typename set<Key, Compare, Allocator>::iterator & m){
			return (m.element != element || m.container != container);
		}
		set_iter & operator++(){
			++element;
			return *this;
		}
		set_iter operator++(int){
			set_iter temp(*this);
			++element;
			return temp;
		}
		set_iter & operator--(){
			--element;
			return *this;
		}
		set_iter operator--(int){
			set_iter temp(*this);
			--element;
			return temp;
		}

	};


	template<class Key, class Compare, class Allocator> class
		set<Key, Compare, Allocator>::set_citer
			: public std::iterator<
				bidirectional_iterator_tag,
				Key,
				typename Allocator::difference_type,
				typename Allocator::pointer,
				typename Allocator::reference
			>
	{
	protected:
		friend class set<Key, Compare, Allocator>;
		set<Key, Compare, Allocator>::size_type element;
		const set<Key, Compare, Allocator> * container;
	public:
		set_citer() : element(0), container(0) {  }
		set_citer(const set<Key, Compare, Allocator>::const_iterator & m) 
			: element(m.element), container(m.container) {  }
		set_citer(const set<Key, Compare, Allocator>::iterator & m) 
			: element(m.element), container(m.container) {  }
		set_citer(set<Key, Compare, Allocator>::size_type e, const set<Key, Compare, Allocator> * const c) 
			: element(e), container(c) {  }
		~set_citer() {  }
		
		typename set<Key, Compare, Allocator>::value_type operator*(){
			return container->data[element];
		}
		const typename set<Key, Compare, Allocator>::value_type * operator->(){
			return &(container->data[element]);
		}
		set_citer & operator=(set<Key, Compare, Allocator> & m){
			element = m.element;
			container = m.container;
			return *this;
		}
		bool operator==(const typename set<Key, Compare, Allocator>::const_iterator & m){
			return (m.element == element && m.container == container);
		}
		bool operator!=(const typename set<Key, Compare, Allocator>::const_iterator & m){
			return (m.element != element || m.container != container);
		}
		set_citer & operator++(){
			++element;
			return *this;
		}
		set_citer operator++(int){
			set_iter temp(*this);
			++element;
			return temp;
		}
		set_citer & operator--(){
			--element;
			return *this;
		}
		set_citer operator--(int){
			set_iter temp(*this);
			--element;
			return temp;
		}

	};


	//Compare the keys of the two items
	template<class Key, class Compare, class Allocator> class 
		set<Key, Compare, Allocator>::value_compare : public binary_function<
			typename set<Key, Compare, Allocator>::value_type,
			typename set<Key, Compare, Allocator>::value_type,
		bool>
	{
		friend class set;
	protected:
		Compare comp;
		value_compare(Compare c) : comp(c) { }
		~value_compare() {  }
	public:
		bool operator()(const value_type& x, const value_type& y) const {
			return comp(x, y);
		}
	};


	template <class Key, class Compare, class Allocator> 
		set<Key, Compare, Allocator>::set(const Compare& comp, const Allocator& al)
		: data(), c(comp)
	{
		
	}

	template <class Key, class Compare, class Allocator> template <class InputIterator>
		set<Key, Compare, Allocator>::
		set(InputIterator first, InputIterator last, const Compare& comp, const Allocator& al)
		: data(), c(comp)
	{
		while(first !=last){
			insert(*first);
		}
	}

	template <class Key, class Compare, class Allocator>
		set<Key, Compare, Allocator>::set(const set<Key, Compare, Allocator>& x)
		:data(x.data), c(x.c)
	{

	}

	template <class Key, class Compare, class Allocator>
		set<Key, Compare, Allocator>::~set()
	{
		
	}

	template <class Key, class Compare, class Allocator>
		set<Key, Compare, Allocator>::set<Key, Compare, Allocator>&
		set<Key, Compare, Allocator>::operator=(const set<Key, Compare, Allocator>& x)
	{
		if( &x == this){
			return this;
		}
		c = x.c;
		data = x.data;
		return *this;
	}


	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::iterator
		set<Key, Compare, Allocator>::begin()
	{
		return set_iter(0, this);
	}

	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::const_iterator
		set<Key, Compare, Allocator>::begin() const
	{
		return set_citer(0, this);

	}
	
	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::iterator
		set<Key, Compare, Allocator>::end()
	{
		return set_iter(data.size(), this);
	}

	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::const_iterator
		set<Key, Compare, Allocator>::end() const
	{
		return set_citer(data.size(), this);
	}

	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::reverse_iterator
		set<Key, Compare, Allocator>::rbegin()
	{
		return set_iter(end());
	}

	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::const_reverse_iterator
		set<Key, Compare, Allocator>::rbegin() const
	{
		return set_iter(end());
	}

	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::reverse_iterator
		set<Key, Compare, Allocator>::rend()
	{
		return set_iter(begin());
	}

	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::const_reverse_iterator
		set<Key, Compare, Allocator>::rend() const
	{
		return set_iter(begin());
	}

	template <class Key, class Compare, class Allocator>
		bool set<Key, Compare, Allocator>::empty() const
	{
		return (data.size() == 0);
	}

	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::size_type
		set<Key, Compare, Allocator>::size() const
	{
		return data.size();
	}

	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::size_type 
		set<Key, Compare, Allocator>::max_size() const
	{
		return data.max_size();
	}


/*	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::reference
		set<Key, Compare, Allocator>::operator[](const key_type & k)
	{
		typename deque<Key, allocator<Key> >::iterator low;
		typename deque<Key, allocator<Key> >::iterator high;
		typename deque<Key, allocator<Key> >::iterator i;

		low = data.begin();
		high = data.end();
		if(low == high){	//No elements
			i = low;
		}else if( c(k, low->first)){
			i = low;
		}else if( c(data.back().first, k) ){
			i = high;
		}else{
			while(( high - low) > 1){
				i = low + ((high - low) /2);
				if( c(k, i->first) ){
					high = i;
				}else{
					low = i;
				}
			}

			if( c(low->first, k) ){		// k >=high
				i = high;
			}else{
				i = low;
			}
		}

		if(i == data.begin()){
			if( c(k, i->first) || data.empty() ){
				value_type temp;
				temp.first = k;
				temp.second = T();
				data.push_front(temp);
			}
			return data.front().second;
		}
		if(i == data.end()){
			value_type temp;
			temp.first = k;
			temp.second = T();
			data.push_back(temp);
			return data.back().second;
		}
		if( c( (i-1)->first, k) && c(k, i->first)){
			//need to insert the element
			value_type temp;
			temp.first = k;
			temp.second = T();
			i = data.insert(i, temp);
			return i->second;
		}
		return i->second;
	}
*/
	template <class Key, class Compare, class Allocator>
		pair<typename set<Key, Compare, Allocator>::iterator, bool>
		set<Key, Compare, Allocator>::insert(const value_type& x)
	{
		pair<typename set<Key, Compare, Allocator>::iterator, bool> retval;
		retval.second = false;
		retval.first = find(x.first);
		if(retval.first == end()){
//FIXME			operator[](x.first) = x.second;
			retval.second = true;
			retval.first = find(x.first);
		}
		return retval;
	}


	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::iterator
		set<Key, Compare, Allocator>::insert(iterator position, const value_type& x)
	{
		//Just reusing code.  It's hard to make improvements over existing algo.
		insert(x);
		return find(x.first);
	}

	template <class Key, class Compare, class Allocator>
		template <class InputIterator> void 
		set<Key, Compare, Allocator>::insert(InputIterator first, InputIterator last)
	{
		while(first !=last){
			insert(*first);
		}
	}

	template <class Key, class Compare, class Allocator> void 
		set<Key, Compare, Allocator>::erase(iterator position)
	{
		//Create a deque iterator from position information and then
		//Use built in erase feature because it is handy.
		typename deque<Key, allocator<Key> >::iterator pos(&data, position.element);
		data.erase(pos);		
	}

	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::size_type
		set<Key, Compare, Allocator>::erase(const key_type& x)
	{
		set<Key, Compare, Allocator>::iterator i = find(x);
		if(i!=end()){
			erase(i);
			return 1;
		}
		return 0;
	}

	template <class Key, class Compare, class Allocator>
		void set<Key, Compare, Allocator>::erase(iterator first, iterator last)
	{
		while(first !=last() ){
			set<Key, Compare, Allocator>::iterator i(&data, first.element);
		}
	}

	template <class Key, class Compare, class Allocator>
		void set<Key, Compare, Allocator>::swap(set<Key, Compare, Allocator>& m)
	{
		Compare n = c;
		c = m.c;
		m.c = n;

		data.swap(m.data);
	}


	template <class Key, class Compare, class Allocator>
		void set<Key, Compare, Allocator>::clear()
	{
		data.clear();
	}


	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::key_compare
		set<Key, Compare, Allocator>::key_comp() const
	{
		return c;
	}

//	value_compare value_comp() const;

	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::iterator
		set<Key, Compare, Allocator>::
		find(const typename set<Key, Compare, Allocator>::key_type& x)
	{
		if(data.size() == 0){
			return end();
		}

		if(data.size() == 1){
			if(  !c(data[0], x) && !c(x, data[0]) ){
				return begin();
			}
			return end();
		}

		size_type low;
		size_type high;
		size_type i;

		low = 0;
		high = data.size() - 1;

		while(( high - low) > 1){
			i = low + ((high - low) /2);
			if( c(x, data[i]) ){
				high = i;
			}else{
				low = i;
			}
		}

		if( c(data[low], x) ){         // k >=high
			i = high;
		}else{
			i = low;
		}
	

		//Make sure we have an exact match....
		if(!c(data[i], x) && !c(x, data[i])){
			return set_iter(i, this);
		}else{
			return end();
		}
		return end();
	}

	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::const_iterator
		set<Key, Compare, Allocator>::find(const key_type& x) const
	{
		if(data.size() == 0){
			return end();
		}

		if(data.size() == 1){
			if(  !c(data[0], x) && !c(x, data[0]) ){
				return begin();
			}
			return end();
		}

		size_type low;
		size_type high;
		size_type i;

		low = 0;
		high = data.size() - 1;

		while(( high - low) > 1){
			i = low + ((high - low) /2);
			if( c(x, data[i]) ){
				high = i;
			}else{
				low = i;
			}
		}

		if( c(data[low], x) ){         // k >=high
			i = high;
		}else{
			i = low;
		}
	

		//Make sure we have an exact match....
		if(!c(data[i], x) && !c(x, data[i])){
			return set_citer(i, this);
		}else{
			return end();
		}
		return end();
	}

	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::size_type
		set<Key, Compare, Allocator>::count(const typename set<Key, Compare, Allocator>::key_type& x) const
	{
		if( find(x) == end()){
			return 0;
		}
		return 1;
	}

	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::iterator 
		set<Key, Compare, Allocator>::lower_bound(const key_type& x)
	{
		return find(x);
	}

	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::const_iterator
		set<Key, Compare, Allocator>::lower_bound(const key_type& x) const
	{
		return find(x);
	}

	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::iterator
		set<Key, Compare, Allocator>::upper_bound(const key_type& x)
	{
		typename set<Key, Compare, Allocator>::iterator i = find(x);
		++i;
		return i;
	}

	template <class Key, class Compare, class Allocator>
		typename set<Key, Compare, Allocator>::const_iterator
		set<Key, Compare, Allocator>::upper_bound(const key_type& x) const
	{
		typename set<Key, Compare, Allocator>::const_iterator i = find(x);
		++i;
		return i;
	}


	template <class Key, class Compare, class Allocator>
		pair<	typename set<Key, Compare, Allocator>::iterator,
			typename set<Key, Compare, Allocator>::iterator
		> set<Key, Compare, Allocator>::equal_range(const key_type& x)
	{
		pair<   typename set<Key, Compare, Allocator>::iterator,
                        typename set<Key, Compare, Allocator>::iterator
                > retval;
		retval.first = lower_bound(x);
		retval.second = upper_bound(x);
		return retval;		
	}

	template <class Key, class Compare, class Allocator>
		pair<	typename set<Key, Compare, Allocator>::const_iterator,
			typename set<Key, Compare, Allocator>::const_iterator
		> set<Key, Compare, Allocator>::equal_range(const key_type& x) const
	{
		pair<   typename set<Key, Compare, Allocator>::const_iterator,
                        typename set<Key, Compare, Allocator>::const_iterator
                > retval;
		retval.first = lower_bound(x);
		retval.second = upper_bound(x);
		return retval;		
	}

	template <class Key, class Compare, class Allocator> bool operator==
		(const set<Key, Compare, Allocator>& x, const set<Key, Compare, Allocator>& y)
	{
		if(c == y.c && data = y.data){
			return true;
		}
		return false;
	}

	template <class Key, class Compare, class Allocator> bool operator< 
		(const set<Key, Compare,Allocator>& x, const set<Key, Compare, Allocator>& y);
	template <class Key, class Compare, class Allocator>bool operator!=
		(const set<Key, Compare,Allocator>& x, const set<Key, Compare, Allocator>& y);
	template <class Key, class Compare, class Allocator> bool operator>
		(const set<Key, Compare,Allocator>& x, const set<Key, Compare, Allocator>& y);
	template <class Key, class Compare, class Allocator> bool operator>=
		(const set<Key, Compare,Allocator>& x, const set<Key, Compare, Allocator>& y);
	template <class Key, class Compare, class Allocator> bool operator<=
		(const set<Key, Compare,Allocator>& x, const set<Key, Compare, Allocator>& y);
	template <class Key, class Compare, class Allocator> void swap
		(set<Key, Compare,Allocator>& x, set<Key, Compare, Allocator>& y);

}


#endif

	
